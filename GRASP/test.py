import numpy as np
import matplotlib.pyplot as plt


l = [1,2,2]
print(len(l))
"""
pop = [[3, 6, 1, 2, 5, 9, 11, 12, 8, 4, 7, 10]
 [ 2 ,5 ,1 ,3 ,6 ,4 ,8 ,9 ,7, 11 ,12, 10]
 [ 2 ,1 ,5 ,4 ,3 ,6 ,9 ,7 ,8 ,10, 11, 12]
 [ 2 ,3 ,1 ,5 ,6 ,4 ,9 11 ,7 ,12 ,8, 10]
 [ 2 ,5 ,8 ,3 ,1 ,6 ,9 ,4 ,7 11 ,10 ,12]
 [ 2 ,5 ,1 ,3 ,8 ,6 ,4 ,9 11 ,7 ,12 ,10]
 [ 2 ,5 ,3 ,8 ,1 ,6 ,9 ,4 11 ,7 ,10 ,12]
 [ 1 ,3 ,2 ,6 ,4 ,5 ,9 ,8 ,7 11 ,10 ,12]
 [ 2 ,3 ,1 ,5 ,8 ,4 ,7 ,6 ,9 11 ,12 ,10]
 [ 1 ,4 ,2 ,5 ,3 ,7 ,8 ,6 10 ,9 ,11 ,12]
 [ 3 ,2 ,6 ,1 ,4 ,5 ,7 ,9 11 12 ,8 ,10]
 [ 2 ,5 ,1 ,3 ,6 ,4 ,8 ,9 ,7 10 ,11 ,12]
 [ 3 ,2 ,1 ,6 ,5 ,9 ,4 ,7 ,8 11 ,10 ,12]
 [ 3 ,2 ,6 ,1 ,5 ,9 11 ,4 ,7 ,8 ,12 ,10]
 [ 2 ,5 ,3 ,6 ,1 ,9 ,8 11 ,4 ,7 ,10 ,12]
 [ 3 ,2 ,5 ,1 ,6 ,4 ,9 ,8 ,7 11 ,12 ,10]
 [ 1 ,3 ,2 ,4 ,5 ,8 ,6 ,7 ,9 11 ,12 ,10]
 [ 1 ,2 ,3 ,5 ,4 ,7 ,6 ,8 ,9 10 ,11 ,12]
 [ 2 ,5 ,8 ,3 ,6 ,9 11 ,1 ,4 12 ,7 ,10]
 [ 3 ,6 ,2 ,5 ,1 ,8 ,4 ,7 ,9 10 ,11 ,12]]"""

"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12])
G.add_edges_from([(1, 4),(2, 5), (3, 6), (4, 7), (5 , 7), (5, 8), (5, 9), (6, 9), (7, 10), (8, 10), (9, 11), (11, 12)])
attrs = {1: {'task1': 2.5}, 2: {'task2': 3}, 3: {'task3': 2}, 4: {'task4': 2.5}, 5: {'task5': 1.5}, 6: {'task6': 1}, 7: {'task7': 2.5}, 8: {'task8': 2}, 9: {'task9': 1.5}, 10: {'task10': 2.5}, 11: {'task11': 2}, 12: {'task12': 1}}
nx.set_node_attributes(G,attrs)
"""
"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12])
G.add_edges_from([(1, 4),(2, 5), (3, 6), (4, 7), (5 , 7), (5, 8), (5, 9), (6, 9), (7, 10), (8, 10), (9, 11), (11, 12)])
attrs = {1: {'task1': 5}, 2: {'task2': 4}, 3: {'task3': 4}, 4: {'task4': 4}, 5: {'task5': 3}, 6: {'task6': 5}, 7: {'task7': 3}, 8: {'task8': 6}, 9: {'task9': 3}, 10: {'task10': 3}, 11: {'task11':4}, 12: {'task12': 2}}
nx.set_node_attributes(G,attrs)
"""
"""
a = "3"
i= 3
print(G.nodes[i]["task"+a])
"""
"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])

G.add_edges_from([(1, 5),(2, 6), (3, 6), (4, 7), (5 , 9), (5, 10), (7, 8), (6, 9), (8, 12), 
(10, 13), (11, 13), (12, 16), (14, 15), (14, 16), (9, 11), (13, 17), (15, 17), (16, 18)
, (18, 20), (20, 24), (24, 25), (17, 19), (19, 25), (21, 23), (22, 23), (23, 25)])


attrs = {1: {'task1': 7}, 2: {'task2': 3}, 3: {'task3': 5}, 4: {'task4': 3}, 
5: {'task5': 2}, 6: {'task6': 1}, 7: {'task7': 4}, 8: {'task8': 1}, 
9: {'task9': 3}, 10: {'task10': 9}, 11: {'task11': 6}, 12: {'task12': 1}, 
13: {'task13': 3}, 14: {'task14': 2}, 15: {'task15': 5}, 16: {'task16': 4}, 
17: {'task17': 9}, 18: {'task18': 2}, 19: {'task19': 2}, 20: {'task20': 2}, 
21: {'task21': 1}, 22: {'task22': 4}, 23: {'task23': 3}, 24: {'task24': 6}, 25: {'task25': 9}}
nx.set_node_attributes(G,attrs)
"""



"""
G.add_nodes_from([1,2,3,4,5]) , , , , , , , , , , , , , , , , , , , #add nodes
G.add_edges_from([(1,4),(2,4),(3,4),(4,5)]) , , , , , , , , , , , , #add relations between nodes , , , , , , , , , , , , , , 

attrs = {1: {'task1':2 }, 2: {'task2':1 }, 3: {'task3':2 }, 4: {'task4':1 }, 4: {'task4':1 }} , , , , #time tasks initialisation
nx.set_node_attributes(G,attrs)

"""

"""
G.add_nodes_from([1,2,3,4,5,6,7]) , , , , , , , , , , , , , , , , , , , #add nodes
G.add_edges_from([(1,3),(2,3),(3,6),(4,5),(5,6),(6,7)]) , , , , , , , , , , , , , , , , #add relations between nodes , , , , , , , , , , , , , , 

attrs = {1: {'task1':5 }, 2: {'task2':2 }, 3: {'task3':2 }, 4: {'task4':3}, 5: {'task5':4}, 6: {'task6':1}, 7: {'task7':3}} , , , , #time tasks initialisation
nx.set_node_attributes(G,attrs)


successors = nx.nodes(nx.dfs_tree(G, 4))
print(successors)
"""


"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12]) , , , , , , , , , , , , , , , , , , , #add nodes
G.add_edges_from([(1,4),(2,5),(3,5),(4,11),(4,6),(5,7),(5,8),(6,9),(7,9),(8,10),(11,12),(9,12)]) , , , , , , , , , , , , , , , , #add relations between nodes , , , , , , , , , , , , , , 

attrs = {1: {'task1':5 }, 2: {'task2':3 }, 3: {'task3':5 }, 4: {'task4':2}, 5: {'task5':3}, 6: {'task6':1}, 7: {'task7':2}, 8: {'task8':1}, 9: {'task9':5}, 10: {'task10':3}, 11: {'task11':6}, 12: {'task12':4}} , , , , #time tasks initialisation
nx.set_node_attributes(G,attrs)
"""
#-----------------------------------------------
"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12])
G.add_edges_from([(1, 4),(2, 5), (3, 6), (4, 7), (5 , 7), (5, 8), (5, 9), (6, 9), (7, 10), (8, 10), (9, 11), (11, 12)])
attrs = {1: {'task1': 2.5}, 2: {'task2': 3}, 3: {'task3': 2}, 4: {'task4': 2.5}, 
5: {'task5': 1.5}, 6: {'task6': 1}, 7: {'task7': 2.5}, 8: {'task8': 2}, 
9: {'task9': 1.5}, 10: {'task10': 2.5}, 11: {'task11': 2}, 12: {'task12': 1}}
nx.set_node_attributes(G,attrs)
"""
#---------------------------------------------------
"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12])
G.add_edges_from([(1, 4),(2, 5), (3, 6), (4, 7), (5 , 7), (5, 8), (5, 9), (6, 9), (7, 10), (8, 10), (9, 11), (11, 12)])
attrs = {1: {'task1': 5}, 2: {'task2': 4}, 3: {'task3': 4}, 4: {'task4': 4}, 5: {'task5': 3}, 6: {'task6': 5}, 7: {'task7': 3}, 8: {'task8': 6}, 9: {'task9': 3}, 10: {'task10': 3}, 11: {'task11':4}, 12: {'task12': 2}}
nx.set_node_attributes(G,attrs)
"""
"""
G.add_nodes_from([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])

G.add_edges_from([(1, 5),(2, 6), (3, 6), (4, 7), (5 , 9), (5, 10), (7, 8), (6, 9), (8, 12), 
(10, 13), (11, 13), (12, 16), (14, 15), (14, 16), (9, 11), (13, 17), (15, 17), (16, 18)
, (18, 20), (20, 24), (24, 25), (17, 19), (19, 25), (21, 23), (22, 23), (23, 25)])


attrs = {1: {'task1': 7}, 2: {'task2': 3}, 3: {'task3': 5}, 4: {'task4': 3}, 
5: {'task5': 2}, 6: {'task6': 1}, 7: {'task7': 4}, 8: {'task8': 1}, 
9: {'task9': 3}, 10: {'task10': 9}, 11: {'task11': 6}, 12: {'task12': 1}, 
13: {'task13': 3}, 14: {'task14': 2}, 15: {'task15': 5}, 16: {'task16': 4}, 
17: {'task17': 9}, 18: {'task18': 2}, 19: {'task19': 2}, 20: {'task20': 2}, 
21: {'task21': 1}, 22: {'task22': 4}, 23: {'task23': 3}, 24: {'task24': 6}, 25: {'task25': 9}}
nx.set_node_attributes(G,attrs)
"""


"""
 , , , , , , , ,l = 1
 , , , , , , , ,ct = cycle_times[i]
 , , , , , , , ,station_1 = [None]*10
 , , , , , , , ,station_2 = [None]*10
 , , , , , , , ,station_3 = [None]*10
 , , , , , , , ,p=0
 , , , , , , , 
 , , , , , , , ,for k in range(nb_tasks):

 , , , , , , , , , ,if(G.nodes[tab[k]]["task"+str(tab[k])] <= ct):
 , , , , , , , , , , , ,#print("station ",l," : ",tab[k],"| ", end=" ")
 , , , , , , , , , , , ,if(l == 1):
 , , , , , , , , , , , , , ,station_1[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1
 , , , , , , , , , , , ,if(l == 2):
 , , , , , , , , , , , , , ,station_2[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1
 , , , , , , , , , , , ,if(l == 3):
 , , , , , , , , , , , , , ,station_3[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1

 , , , , , , , , , , , ,ct = ct - G.nodes[tab[k]]["task"+str(tab[k])]

 , , , , , , , , , ,else:
 , , , , , , , , , , , ,l = l + 1 
 , , , , , , , , , , , ,ct = cycle_times[i]
 , , , , , , , , , , , ,p = 0

 , , , , , , , , , , , ,if(l == 1):
 , , , , , , , , , , , , , ,station_1[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1
 , , , , , , , , , , , ,if(l == 2):
 , , , , , , , , , , , , , ,station_2[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1
 , , , , , , , , , , , ,if(l == 3):
 , , , , , , , , , , , , , ,station_3[p] = tab[k]
 , , , , , , , , , , , , , ,p = p + 1
 , , , , , , , , , , , ,
 , , , , , , , , , , , ,#print("station ",l," : ",tab[k],"| ", end=" ")
 , , , , , , , , , , , ,ct = ct - G.nodes[tab[k]]["task"+str(tab[k])]
 , , , , , , , , , ,"""

"""
 , , , , , , , ,print("station 1 : ", end=" ")
 , , , , , , , ,for t in range(0,len(station_1)):
 , , , , , , , , , ,if(station_1[t] != None):
 , , , , , , , , , , , ,print(station_1[t]," | ", end=" ")
 , , , , , , , ,print("")

 , , , , , , , ,print("station 2 : ", end=" ")
 , , , , , , , ,for t in range(0,len(station_2)):
 , , , , , , , , , ,if(station_2[t] != None):
 , , , , , , , , , , , ,print(station_2[t]," | ", end=" ")
 , , , , , , , ,print("")

 , , , , , , , ,print("station 3 : ", end=" ")
 , , , , , , , ,for t in range(0,len(station_3)):
 , , , , , , , , , ,if(station_3[t] != None):
 , , , , , , , , , , , ,print(station_3[t]," | ", end=" ")
 , , , , , , , ,print("")

 , , , , , , , ,print("success for c = ", cycle_times[i])
 , , , , , , , ,print("--------------------------------")
 , , , , , , , ,"""